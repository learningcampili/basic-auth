crear applicacion
=================

npx  create-next-app 


crear el docker-compose.yml
===========================

version: "3"

services:
  todosDB:
    image: postgres:15.3
    container_name: modelo-db
    restart: always
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./postgres:/var/lib/postgresql/data

crear base de datos
====================
docker compose up -d

instalar prisma
===============
npm install prisma -D

instalar prisma client
======================
npm install @prisma/client

para Authjs instalar el prisma adapter
======================================
@auth/prisma-adapter

Inicializar prisma
==================
npx prisma init

cambiar los datos en el env para la base de datos y crear un .env.template y agregar el .env al .gitignore


instalar Authj
==============
npm install next-auth@beta

crear auth secret
==================
npx auth secret


crear los modelos dentro de prisma/schema.prisma
================================================
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  password       String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}


crear la migracion de prisma
============================
npm exec prisma migrate dev

generar el prisma client
========================
npm exec prisma generate
